apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: BAU release
on:
  workflow_dispatch:

env:
  PAT: "${{ secrets.PAT }}"

jobs:
  setup:
    outputs:
      manifest_template: ${{ steps.manifest.outputs.manifest_template }}
    steps:
      - name: Get component IDs from the application
        id: components
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          curl -X 'GET' https://api.saas-preprod.beescloud.com/v1/resources/3d18fc74-5e3e-4792-b3d0-c41c97cf985e/services/ceeaabb9-5e28-4b18-a7e5-5c8c507e98e4    --header 'Content-Type: application/json'       --header "Authorization: Bearer $PAT"
          COMPONENT_IDS="$(curl -X 'GET' https://api.saas-preprod.beescloud.com/v1/resources/3d18fc74-5e3e-4792-b3d0-c41c97cf985e/services/ceeaabb9-5e28-4b18-a7e5-5c8c507e98e4    --header 'Content-Type: application/json'       --header "Authorization: Bearer $PAT" | jq -r '.service.linkedComponentIds[]')"
          echo $COMPONENT_IDS > "$CLOUDBEES_OUTPUTS/componentIds"             
        
      - name: Create manifest
        id: manifest
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          COMPONENT_IDS="${{ steps.components.outputs.componentIds }}"
          MANIFEST="[]" # workflow-dispatch action input
          for COMPONENT_ID in $COMPONENT_IDS
          do 
            artifacts=$(curl -X 'GET' https://api.saas-preprod.beescloud.com/v2/resources/$COMPONENT_ID/artifactinfos?filter.latestOnly=true    --header 'Content-Type: application/json'       --header "Authorization: Bearer $PAT" | jq -c '.artifacts[]')
            # Process each artifact
            for artifact in $artifacts;
            do
              manifest_entry=$(echo "$artifact" |\
              jq -c '{component_id: .resourceId, branch_name: "main", workflow_file_name: "deploy.yaml", inputs: {artifactName: .name, artifactVersion: .version} }' )
              MANIFEST=$(echo "$MANIFEST" | jq -c '.[]' | jq -c -s --argjson b "${manifest_entry}" '.[. | length] = $b')
            done
          done
          echo "$MANIFEST" | tee manifest_template.yaml
          echo "$MANIFEST" > "$CLOUDBEES_OUTPUTS/manifest_template"
  pre-prod:
    environment: pre-prod
    needs: setup
    outputs:
      manifest_template: ${{ steps.manifest.outputs.manifest_template }}
    steps:
      - name: Update manifest file with environment
        id: manifest
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          # Propagate the manifest template to the next job
          echo '${{ needs.setup.outputs.manifest_template }}' > "$CLOUDBEES_OUTPUTS/manifest_template"
          echo '${{ needs.setup.outputs.manifest_template }}' | \
          jq -c '.[].inputs.environment="pre-prod"' | tee manifest.yaml
        
      - name: deploy
        uses: cloudbees-io/workflows-dispatch
        with:
          workflows-dispatch-file: manifest.yaml
          token: ${{ secrets.PAT}}
  prod:
    environment: prod
    needs: pre-prod
    steps:
      - name: Update manifest file with environment
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          echo '${{ needs.pre-prod.outputs.manifest_template }}' | \
          jq -c '.[].inputs.environment="prod"' | tee manifest.yaml
        
      - name: deploy
        uses: cloudbees-io/workflows-dispatch
        with:
          workflows-dispatch-file: manifest.yaml
          token: ${{ secrets.PAT}} 
