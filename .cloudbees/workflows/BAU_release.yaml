# TODO
# 1. orgcomp step is not working and the hardcoded workflow needs to be replaced with a dynamic value
# 2. API authentication not working, works in production with https://cloudbees.io/orgs/cloudbees/components/runs/f6908ca9-cb8b-496b-a30a-9803535bd18f/8f2a2b97-7de5-4b00-b8f7-e964add3c585/bdb6dfd3-e695-4ec2-bb71-e18ddbb57d29/1?componentId=f6908ca9-cb8b-496b-a30a-9803535bd18f&workflowId=8f2a2b97-7de5-4b00-b8f7-e964add3c585&organizationId=77f88258-7aa3-45bf-47c6-d869838d9770&job=build
# 2. components step not working because of #1. It works with hardcoded values.
# 3. Environment support not working

apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: BAU release
on:
  workflow_dispatch:

env:
  PAT: "${{ secrets.PAT }}"
  CLOUDBEES_API_URL: ${{ cloudbees.api.url }}
  
jobs:
  setup:
    outputs:
      manifest_template: ${{ steps.manifest.outputs.manifest_template }}
    steps:
      - name: Get org and component IDs from workflow
        id: orgcomp
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          RESPONSE=$(curl -X 'GET'  ${CLOUDBEES_API_URL}/v1/resources/5326d2d5-d712-4038-b6a9-7756d2409ac0?parents=true \
            --header 'Content-Type: application/json' \
            --header 'Authorization: Bearer $PAT')
          echo "RESPONSE: ${RESPONSE}"
          echo "$RESPONSE" | jq -c -r '.parents[] | select(.type=="RESOURCE_TYPE_ORGANIZATION") | .id' | head -1 | tr -d '\n' > "$CLOUDBEES_OUTPUTS/orgId"
          echo "$RESPONSE" | jq -c -r '.parents[] | select(.type=="RESOURCE_TYPE_REPOSITORY") | .id' | tr -d '\n' > "$CLOUDBEES_OUTPUTS/componentId"
          echo "resources/$(cat $CLOUDBEES_OUTPUTS/orgId)/services/$(cat $CLOUDBEES_OUTPUTS/componentId)"
   
      - name: Get component IDs from the application
        id: components
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          echo curl -X 'GET' ${CLOUDBEES_API_URL}/v1/resources/${{ steps.orgcomp.outputs.orgId}}/services/${{ steps.orgcomp.outputs.componentId}}    --header 'Content-Type: application/json'       --header "Authorization: Bearer $PAT"
          curl -X 'GET' ${CLOUDBEES_API_URL}/v1/resources/${{ steps.orgcomp.outputs.orgId}}/services/${{ steps.orgcomp.outputs.componentId}}    --header 'Content-Type: application/json'       --header "Authorization: Bearer $PAT"
          COMPONENT_IDS="$(curl -X 'GET' ${CLOUDBEES_API_URL}/v1/resources/${{ steps.orgcomp.outputs.orgId}}/services/${{ steps.orgcomp.outputs.componentId}}    --header 'Content-Type: application/json'       --header "Authorization: Bearer $PAT" | jq -r '.service.linkedComponentIds[]')"
          echo $COMPONENT_IDS > "$CLOUDBEES_OUTPUTS/componentIds"             
        
      - name: Create manifest
        id: manifest
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          COMPONENT_IDS="${{ steps.components.outputs.componentIds }}"
          MANIFEST="[]" # workflow-dispatch action input
          for COMPONENT_ID in $COMPONENT_IDS
          do 
            artifacts=$(curl -X 'GET' ${CLOUDBEES_API_URL}/v2/resources/$COMPONENT_ID/artifactinfos?filter.latestOnly=true    --header 'Content-Type: application/json'       --header "Authorization: Bearer $PAT" | jq -c '.artifacts[]')
            # Process each artifact
            for artifact in $artifacts;
            do
              manifest_entry=$(echo "$artifact" |\
              jq -c '{component_id: .resourceId, branch_name: "main", workflow_file_name: "deploy.yaml", inputs: {artifactName: .name, artifactVersion: .version, url: .url, digest: .digest} }' )
              MANIFEST=$(echo "$MANIFEST" | jq -c '.[]' | jq -c -s --argjson b "${manifest_entry}" '.[. | length] = $b')
            done
          done
          echo "$MANIFEST" | tee manifest_template.yaml
          echo "$MANIFEST" > "$CLOUDBEES_OUTPUTS/manifest_template"
  pre-prod:
    environment: pre-prod
    needs: setup
    outputs:
      manifest_template: ${{ steps.manifest.outputs.manifest_template }}
    steps:
      - name: Update manifest file with environment
        id: manifest
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          # Propagate the manifest template to the next job
          echo '${{ needs.setup.outputs.manifest_template }}' > "$CLOUDBEES_OUTPUTS/manifest_template"
          echo '${{ needs.setup.outputs.manifest_template }}' | \
          jq -c '.[].inputs.environment="pre-prod"' | tee manifest.yaml
        
      - name: deploy
        uses: cloudbees-io/workflows-dispatch
        with:
          workflows-dispatch-file: manifest.yaml
          token: ${{ secrets.PAT}}
  prod:
    environment: prod
    needs: pre-prod
    steps:
      - name: Update manifest file with environment
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          echo '${{ needs.pre-prod.outputs.manifest_template }}' | \
          jq -c '.[].inputs.environment="prod"' | tee manifest.yaml
        
      - name: deploy
        uses: cloudbees-io/workflows-dispatch
        with:
          workflows-dispatch-file: manifest.yaml
          token: ${{ secrets.PAT}} 
