# This workflow implements a basic release process that deploys the latest component versions for an application.
# To do this, the workflow
# 1. identifies all the components associated with the application
# 2. identifies the last artifact versions on each component
# 3. creates a manifest template file for the cloudbees-io/workflows-dispatch action based on the artifact versions found
# 4. in the pre-prod job, the manifest file is updated to include the environment name (pre-prod) and cloudbees-io/workflows-dispatch called

# Instructions
# 1. A personal access token is required. Create one an save it as a secret "PAT" in the application org or higher.
# 2. The workflow requires components that include a workflow called "deploy.yaml"
# 3. The workflow will only run the component deploy.yaml workflow if there is an artifact version on that component. Create and run a workflow that creates at least one artifact version

# TODO
# 1. The workflow run needs a way to find the application components. Currently, the workflow uses a hardcoded workflowId to find its (the workflow and application) org and component.
#    With those values, the components can be found. The hardcoded value for the workflow was found from the workflow YAML editor:
#    https://saas-preprod.beescloud.com/orgs/cloudbees-preprod/components/workflows/main/composer?fileName=BAU_release.yaml&branch=main&workflowId=5326d2d5-d712-4038-b6a9-7756d2409ac0&componentId=ceeaabb9-5e28-4b18-a7e5-5c8c507e98e4&organizationId=3d18fc74-5e3e-4792-b3d0-c41c97cf985e
#    This will probably require new ${{ cloudbess.xxx }} contexts, perhaps cloudbees.org and cloudbees.component
# 2. Environment support not working...

apiVersion: automation.cloudbees.io/v1alpha1
kind: workflow
name: BAU release
on:
  workflow_dispatch:
env:
  PAT: ${{ secrets.PAT }}
  CLOUDBEES_API_URL: ${{ cloudbees.api.url }}
jobs:
  setup:
    outputs:
      manifest_template: ${{ steps.manifest.outputs.manifest_template }}
    steps:
      - name: Get org and component IDs from workflow
        id: orgcomp
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          RESPONSE=$(curl -X 'GET'  "${CLOUDBEES_API_URL}/v1/resources/5326d2d5-d712-4038-b6a9-7756d2409ac0?parents=true" \
            --header 'Content-Type: application/json' \
            --header "Authorization: Bearer $PAT")
          echo "RESPONSE: ${RESPONSE}"
          echo "$RESPONSE" | jq -c -r '.parents[] | select(.type=="RESOURCE_TYPE_ORGANIZATION") | .id' | head -1 | tr -d '\n' > "$CLOUDBEES_OUTPUTS/orgId"
          echo "$RESPONSE" | jq -c -r '.parents[] | select(.type=="RESOURCE_TYPE_REPOSITORY") | .id' | tr -d '\n' > "$CLOUDBEES_OUTPUTS/componentId"
          echo "resources/$(cat $CLOUDBEES_OUTPUTS/orgId)/services/$(cat $CLOUDBEES_OUTPUTS/componentId)"
      - name: Get component IDs from the application
        id: components
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          echo curl -X 'GET' ${CLOUDBEES_API_URL}/v1/resources/${{ steps.orgcomp.outputs.orgId}}/services/${{ steps.orgcomp.outputs.componentId}}    --header 'Content-Type: application/json'       --header "Authorization: Bearer $PAT"
          curl -X 'GET' ${CLOUDBEES_API_URL}/v1/resources/${{ steps.orgcomp.outputs.orgId}}/services/${{ steps.orgcomp.outputs.componentId}}    --header 'Content-Type: application/json'       --header "Authorization: Bearer $PAT"
          COMPONENT_IDS="$(curl -X 'GET' ${CLOUDBEES_API_URL}/v1/resources/${{ steps.orgcomp.outputs.orgId}}/services/${{ steps.orgcomp.outputs.componentId}}    --header 'Content-Type: application/json'       --header "Authorization: Bearer $PAT" | jq -r '.service.linkedComponentIds[]')"
          echo $COMPONENT_IDS > "$CLOUDBEES_OUTPUTS/componentIds"             
      - name: Create manifest
        id: manifest
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          COMPONENT_IDS="${{ steps.components.outputs.componentIds }}"
          MANIFEST="[]" # workflow-dispatch action input
          for COMPONENT_ID in $COMPONENT_IDS
          do 
            artifacts=$(curl -X 'GET' ${CLOUDBEES_API_URL}/v2/resources/$COMPONENT_ID/artifactinfos?filter.latestOnly=true    --header 'Content-Type: application/json'       --header "Authorization: Bearer $PAT" | jq -c '.artifacts[]')
            # Process each artifact
            for artifact in $artifacts;
            do
              manifest_entry=$(echo "$artifact" |\
              jq -c '{component_id: .resourceId, branch_name: "main", workflow_file_name: "deploy.yaml", inputs: {artifactName: .name, artifactVersion: .version, url: .url, digest: .digest} }' )
              MANIFEST=$(echo "$MANIFEST" | jq -c '.[]' | jq -c -s --argjson b "${manifest_entry}" '.[. | length] = $b')
            done
          done
          echo "$MANIFEST" | tee manifest_template.yaml
          echo "$MANIFEST" > "$CLOUDBEES_OUTPUTS/manifest_template"
  pre-prod:
    environment: pre-prod
    needs: setup
    steps:
      - name: Update manifest file with environment
        id: manifest
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          # Propagate the manifest template to the next job
          echo '${{ needs.setup.outputs.manifest_template }}' > "$CLOUDBEES_OUTPUTS/manifest_template"
          echo '${{ needs.setup.outputs.manifest_template }}' | \
          jq -c '.[].inputs.environment="pre-prod"' | tee manifest.yaml
      - name: deploy
        uses: cloudbees-io/workflows-dispatch
        with:
          workflows-dispatch-file: manifest.yaml
          token: ${{ secrets.PAT}}
  SRE:
    timeout-minutes: 4320
    delegates: cloudbees-io/manual-approval/custom-job.yml@v1
    needs: pre-prod
    with:
      approvers: 9e6cef82-03d3-11eb-9d67-42010a83ae35
      disallowLaunchByUser: false
      instructions: Please approve for production deployment
  prod:
    environment: prod
    needs:
      - SRE
      - setup
    steps:
      - name: Update manifest file with environment
        id: manifest
        uses: docker://figured/alpine-curl-jq-bash
        shell: bash
        run: |
          # Propagate the manifest template to the next job
          echo '${{ needs.setup.outputs.manifest_template }}' > "$CLOUDBEES_OUTPUTS/manifest_template"
          echo '${{ needs.setup.outputs.manifest_template }}' | \
          jq -c '.[].inputs.environment="prod"' | tee manifest.yaml
      - name: deploy
        uses: cloudbees-io/workflows-dispatch
        with:
          workflows-dispatch-file: manifest.yaml
          token: ${{ secrets.PAT}}
